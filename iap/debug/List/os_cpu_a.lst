###############################################################################
#                                                                             #
#     IAR Assembler V7.10.3.6832/W32 for ARM 26/Aug/2016  15:25:11            #
#     Copyright 1999-2014 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  Z:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\src\uCOS-II\Ports\os_cpu_a.asm#
#           List file     =  Z:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\Debug\List\os_cpu_a.lst#
#           Object file   =  Z:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\Debug\Obj\os_cpu_a.o#
#           Command line  =  Z:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\src\uCOS-II\Ports\os_cpu_a.asm #
#                            -OZ:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\Debug\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LZ:\ProjectDevlop\GPRS_MODULE_CAN\整改第六次更改送测版本\Debug\List\ #
#                            -t8 --cpu Cortex-M3 --fpu None                   #
#                                                                             #
###############################################################################

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                  uC/OS-II
    3                           ;                                         The
                                 Real-Time Kernel
    4                           ;
    5                           ;                               (c) Copyright
                                 1992-2006, Micrium, Weston, FL
    6                           ;                                          All
                                 Rights Reserved
    7                           ;
    8                           ;                                          
                                 ARM Cortex-M3 Port
    9                           ;
   10                           ; File      : OS_CPU_A.ASM
   11                           ; version   : V2.86
   12                           ; By        : Jean J. Labrosse
   13                           ;             Brian Nagel
   14                           ;
   15                           ; For       : ARMv7M Cortex-M3
   16                           ; Mode      : Thumb2
   17                           ; Toolchain : IAR EWARM
   18                           ;*********************************************
                                ***********************************************
                                ************
   19                           
   20                           ;*********************************************
                                ***********************************************
                                ************
   21                           ;                                          
                                 PUBLIC FUNCTIONS
   22                           ;*********************************************
                                ***********************************************
                                ************
   23                           
   24                               EXTERN  OSRunning                         
                                                  ; External references
   25                               EXTERN  OSPrioCur
   26                               EXTERN  OSPrioHighRdy
   27                               EXTERN  OSTCBCur
   28                               EXTERN  OSTCBHighRdy
   29                               EXTERN  OSIntNesting
   30                               EXTERN  OSIntExit
   31                               EXTERN  OSTaskSwHook
   32                           
   33                           
   34                               PUBLIC  OS_CPU_SR_Save                    
                                                  ; Functions declared in this
                                 file
   35                               PUBLIC  OS_CPU_SR_Restore
   36                               PUBLIC  OSStartHighRdy
   37                               PUBLIC  OSCtxSw
   38                               PUBLIC  OSIntCtxSw
   39                               PUBLIC  PendSV_Handler
   40                           
   41                           ;*********************************************
                                ***********************************************
                                ************
   42                           ;                                             
                                   EQUATES
   43                           ;*********************************************
                                ***********************************************
                                ************
   44                           
   45                           NVIC_INT_CTRL   EQU     0xE000ED04            
                                                  ; Interrupt control state
                                 register.
   46                           NVIC_SYSPRI14   EQU     0xE000ED22            
                                                  ; System priority register
                                 (priority 14).
   47                           NVIC_PENDSV_PRI EQU           0xFF            
                                                  ; PendSV priority value
                                 (lowest).
   48                           NVIC_PENDSVSET  EQU     0x10000000            
                                                  ; Value to trigger PendSV
                                 exception.
   49                           
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           ;                                      CODE
                                 GENERATION DIRECTIVES
   52                           ;*********************************************
                                ***********************************************
                                ************
   53                           
   54                                   RSEG CODE:CODE:NOROOT(2)
   55                           
   56                           ;*********************************************
                                ***********************************************
                                ************
   57                           ;                                   CRITICAL
                                 SECTION METHOD 3 FUNCTIONS
   58                           ;
   59                           ; Description: Disable/Enable interrupts by
                                 preserving the state of interrupts.  Generally
                                 speaking you
   60                           ;              would store the state of the
                                 interrupt disable flag in the local variable
                                 'cpu_sr' and then
   61                           ;              disable interrupts.  'cpu_sr'
                                 is allocated in all of uC/OS-II's functions
                                 that need to
   62                           ;              disable interrupts.  You would
                                 restore the interrupt disable state by copying
                                 back 'cpu_sr'
   63                           ;              into the CPU's status
                                 register.
   64                           ;
   65                           ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(v
                                oid);
   66                           ;                  void       OS_CPU_SR_Restor
                                e(OS_CPU_SR cpu_sr);
   67                           ;
   68                           ;
   69                           ; Note(s)    : 1) These functions are used in
                                 general like this:
   70                           ;
   71                           ;                 void Task (void *p_arg)
   72                           ;                 {
   73                           ;                 #if OS_CRITICAL_METHOD == 3 
                                         /* Allocate storage for CPU status
                                 register */
   74                           ;                     OS_CPU_SR  cpu_sr;
   75                           ;                 #endif
   76                           ;
   77                           ;                          :
   78                           ;                          :
   79                           ;                     OS_ENTER_CRITICAL();    
                                         /* cpu_sr = OS_CPU_SaveSR();          
                                      */
   80                           ;                          :
   81                           ;                          :
   82                           ;                     OS_EXIT_CRITICAL();     
                                         /* OS_CPU_RestoreSR(cpu_sr);          
                                      */
   83                           ;                          :
   84                           ;                          :
   85                           ;                 }
   86                           ;*********************************************
                                ***********************************************
                                ************
   87                           
   88                           OS_CPU_SR_Save
   89    00000000 EFF31080          MRS     R0, PRIMASK                        
                                                             ; Set prio int
                                             mask to mask all (except
                                             faults)
   90    00000004 72B6              CPSID   I
   91    00000006 7047              BX      LR
   92                           
   93                           OS_CPU_SR_Restore
   94    00000008 80F31088          MSR     PRIMASK, R0
   95    0000000C 7047              BX      LR
   96                           
   97                           ;*********************************************
                                ***********************************************
                                ************
   98                           ;                                         
                                 START MULTITASKING
   99                           ;                                       void
                                 OSStartHighRdy(void)
  100                           ;
  101                           ; Note(s) : 1) This function triggers a PendSV
                                 exception (essentially, causes a context
                                 switch) to cause
  102                           ;              the first task to start.
  103                           ;
  104                           ;           2) OSStartHighRdy() MUST:
  105                           ;              a) Setup PendSV exception
                                 priority to lowest;
  106                           ;              b) Set initial PSP to 0, to
                                 tell context switcher this is first run;
  107                           ;              c) Set OSRunning to TRUE;
  108                           ;              d) Trigger PendSV exception;
  109                           ;              e) Enable interrupts (tasks
                                 will run with interrupts enabled).
  110                           ;*********************************************
                                ***********************************************
                                ************
  111                           
  112                           OSStartHighRdy
  113    0000000E 1B48              LDR     R0, =NVIC_SYSPRI14                 
                                                             ; Set the PendSV
                                             exception priority
  114    00000010 FF21              LDR     R1, =NVIC_PENDSV_PRI
  115    00000012 0170              STRB    R1, [R0]
  116                           
  117    00000014 0020              MOVS    R0, #0                             
                                                             ; Set the PSP to 0
                                             for initial context switch
                                             call
  118    00000016 80F30988          MSR     PSP, R0
  119                           
  120    0000001A 1948              LDR     R0, =OSRunning                     
                                                             ; OSRunning =
                                             TRUE
  121    0000001C 0121              MOVS    R1, #1
  122    0000001E 0170              STRB    R1, [R0]
  123                           
  124    00000020 1848              LDR     R0, =NVIC_INT_CTRL                 
                                                             ; Trigger the
                                             PendSV exception (causes context
                                             switch)
  125    00000022 1949              LDR     R1, =NVIC_PENDSVSET
  126    00000024 0160              STR     R1, [R0]
  127                           
  128    00000026 62B6              CPSIE   I                                  
                                                             ; Enable
                                             interrupts at processor level
  129                           
  130                           OSStartHang
  131    00000028 FEE7              B       OSStartHang                        
                                                              ; Should never
                                              get here
  132                           
  133                           
  134                           ;*********************************************
                                ***********************************************
                                ************
  135                           ;                               PERFORM A
                                 CONTEXT SWITCH (From task level)
  136                           ;                                          
                                 void OSCtxSw(void)
  137                           ;
  138                           ; Note(s) : 1) OSCtxSw() is called when OS
                                 wants to perform a task context switch.  This
                                 function
  139                           ;              triggers the PendSV exception
                                 which is where the real work is done.
  140                           ;*********************************************
                                ***********************************************
                                ************
  141                           
  142                           OSCtxSw
  143    0000002A 1648              LDR     R0, =NVIC_INT_CTRL                 
                                                             ; Trigger the
                                             PendSV exception (causes context
                                             switch)
  144    0000002C 1649              LDR     R1, =NVIC_PENDSVSET
  145    0000002E 0160              STR     R1, [R0]
  146    00000030 7047              BX      LR
  147                           
  148                           ;*********************************************
                                ***********************************************
                                ************
  149                           ;                             PERFORM A
                                 CONTEXT SWITCH (From interrupt level)
  150                           ;                                         void
                                 OSIntCtxSw(void)
  151                           ;
  152                           ; Notes:    1) OSIntCtxSw() is called by
                                 OSIntExit() when it determines a context
                                 switch is needed as
  153                           ;              the result of an interrupt. 
                                 This function simply triggers a PendSV
                                 exception which will
  154                           ;              be handled when there are no
                                 more interrupts active and interrupts are
                                 enabled.
  155                           ;*********************************************
                                ***********************************************
                                ************
  156                           
  157                           OSIntCtxSw
  158    00000032 1448              LDR     R0, =NVIC_INT_CTRL                 
                                                             ; Trigger the
                                             PendSV exception (causes context
                                             switch)
  159    00000034 1449              LDR     R1, =NVIC_PENDSVSET
  160    00000036 0160              STR     R1, [R0]
  161    00000038 7047              BX      LR
  162                           
  163                           ;*********************************************
                                ***********************************************
                                ************
  164                           ;                                        
                                 HANDLE PendSV EXCEPTION
  165                           ;                                     void
                                 PendSV_Handler(void)
  166                           ;
  167                           ; Note(s) : 1) PendSV is used to cause a
                                 context switch.  This is a recommended method
                                 for performing
  168                           ;              context switches with
                                 Cortex-M3.  This is because the Cortex-M3
                                 auto-saves half of the
  169                           ;              processor context on any
                                 exception, and restores same on return from
                                 exception.  So only
  170                           ;              saving of R4-R11 is required
                                 and fixing up the stack pointers.  Using the
                                 PendSV exception
  171                           ;              this way means that context
                                 saving and restoring is identical whether it
                                 is initiated from
  172                           ;              a thread or occurs due to an
                                 interrupt or exception.
  173                           ;
  174                           ;           2) Pseudo-code is:
  175                           ;              a) Get the process SP, if 0
                                 then skip (goto d) the saving part (first
                                 context switch);
  176                           ;              b) Save remaining regs r4-r11
                                 on process stack;
  177                           ;              c) Save the process SP in its
                                 TCB, OSTCBCur->OSTCBStkPtr = SP;
  178                           ;              d) Call OSTaskSwHook();
  179                           ;              e) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  180                           ;              f) Get current ready thread
                                 TCB, OSTCBCur = OSTCBHighRdy;
  181                           ;              g) Get new process SP from TCB,
                                 SP = OSTCBHighRdy->OSTCBStkPtr;
  182                           ;              h) Restore R4-R11 from new
                                 process stack;
  183                           ;              i) Perform exception return
                                 which will restore remaining context.
  184                           ;
  185                           ;           3) On entry into PendSV handler:
  186                           ;              a) The following have been
                                 saved on the process stack (by processor):
  187                           ;                 xPSR, PC, LR, R12,
                                 R0-R3
  188                           ;              b) Processor mode is switched
                                 to Handler mode (from Thread mode)
  189                           ;              c) Stack is Main stack
                                 (switched from Process stack)
  190                           ;              d) OSTCBCur      points to the
                                 OS_TCB of the task to suspend
  191                           ;                 OSTCBHighRdy  points to the
                                 OS_TCB of the task to resume
  192                           ;
  193                           ;           4) Since PendSV is set to lowest
                                 priority in the system (by OSStartHighRdy()
                                 above), we
  194                           ;              know that it will only be run
                                 when no other exception or interrupt is
                                 active, and
  195                           ;              therefore safe to assume that
                                 context being switched out was using the
                                 process stack (PSP).
  196                           ;*********************************************
                                ***********************************************
                                ************
  197                           
  198                           PendSV_Handler
  199    0000003A 72B6              CPSID   I                                  
                                                             ; Prevent
                                             interruption during context
                                             switch
  200    0000003C EFF30980          MRS     R0, PSP                            
                                                             ; PSP is process
                                             stack pointer
  201    00000040 28B1              CBZ     R0, PendSV_Handler_nosave          
                                                            ; Skip register
                                                  save the first time
  202                           
  203    00000042 2038              SUBS    R0, R0, #0x20                      
                                                             ; Save remaining
                                             regs r4-11 on process stack
  204    00000044 80E8F00F          STM     R0, {R4-R11}
  205                           
  206    00000048 1049              LDR     R1, =OSTCBCur                      
                                                             ; OSTCBCur->OSTCBS
                                            tkPtr = SP;
  207    0000004A 0968              LDR     R1, [R1]
  208    0000004C 0860              STR     R0, [R1]                           
                                                             ; R0 is SP of
                                             process being switched out
  209                           
  210                                                                         
                                                  ; At this point, entire
                                 context of process has been saved
  211                           PendSV_Handler_nosave
  212    0000004E 00B5              PUSH    {R14}                              
                                                             ; Save LR
                                             exc_return value
  213    00000050 0F48              LDR     R0, =OSTaskSwHook                  
                                                             ; OSTaskSwHook();
  214    00000052 8047              BLX     R0
  215    00000054 5DF804EB          POP     {R14}
  216                           
  217    00000058 0E48              LDR     R0, =OSPrioCur                     
                                                             ; OSPrioCur =
                                             OSPrioHighRdy;
  218    0000005A 0F49              LDR     R1, =OSPrioHighRdy
  219    0000005C 0A78              LDRB    R2, [R1]
  220    0000005E 0270              STRB    R2, [R0]
  221                           
  222    00000060 0A48              LDR     R0, =OSTCBCur                      
                                                             ; OSTCBCur  =
                                             OSTCBHighRdy;
  223    00000062 0E49              LDR     R1, =OSTCBHighRdy
  224    00000064 0A68              LDR     R2, [R1]
  225    00000066 0260              STR     R2, [R0]
  226                           
  227    00000068 1068              LDR     R0, [R2]                           
                                                             ; R0 is new
                                             process SP; SP = OSTCBHighRdy->OST
                                            CBStkPtr;
  228    0000006A 90E8F00F          LDM     R0, {R4-R11}                       
                                                             ; Restore r4-11
                                             from new process stack
  229    0000006E 2030              ADDS    R0, R0, #0x20
  230    00000070 80F30988          MSR     PSP, R0                            
                                                             ; Load PSP with
                                             new process SP
  231    00000074 4EF0040E          ORR     LR, LR, #0x04                      
                                                             ; Ensure exception
                                             return uses process stack
  232    00000078 62B6              CPSIE   I
  233    0000007A 7047              BX      LR                                 
                                                             ; Exception return
                                             will restore remaining context
  234                           
  234.1                                  TABLE
  234.2  0000007C 22ED00E0              Reference on line 113
  234.3  00000080 ........              Reference on line 120
  234.4  00000084 04ED00E0              Reference on line 124,143,158
  234.5  00000088 00000010              Reference on line 125,144,159
  234.6  0000008C ........              Reference on line 206,222
  234.7  00000090 ........              Reference on line 213
  234.8  00000094 ........              Reference on line 217
  234.9  00000098 ........              Reference on line 218
  234.10 0000009C ........              Reference on line 223
  235                               END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 160         #
##############################



